package edu.sjsu.cs157a.forum.dao;

import edu.sjsu.cs157a.forum.model.User;
import org.junit.Test;

import java.sql.Timestamp;

import static org.junit.Assert.*;

public class UserDAOTest {

    @Test
    public void test_getConnection() {
        UserDAO userDAO = new UserDAO();
        assertNotNull(userDAO.getConnection());
    }

    @Test
    public void test_getPasswordByUsername() {
        UserDAO userDAO = new UserDAO();
        assertNull(userDAO.getPasswordByUsername("DoesntExist"));
        assertEquals("flowery_pin", userDAO.getPasswordByUsername("flower_girl"));
    }

    @Test
    public void test_getAllUsers() {
        UserDAO userDAO = new UserDAO();
        assertTrue(userDAO.getAllUsers().size()>0);
    }

    @Test
    public void test_getUserById() {
        UserDAO userDAO = new UserDAO();
        
        // Test non-existent user
        assertNull(userDAO.getUserById(999999));
        
        // Test existing user (using ID from flower_girl)
        assertNotNull(userDAO.getUserById(1));
    }

    @Test
    public void test_createUser() {
        UserDAO userDAO = new UserDAO();
        
        // Create test user data
        User newUser = new User(
            null, // ID will be generated by DB
            "testuser_" + System.currentTimeMillis(), // Unique username
            "testpass",
            "test" + System.currentTimeMillis() + "@example.com",
            new Timestamp(System.currentTimeMillis())
        );
        
        // Test creating user
        User createdUser = userDAO.createUser(newUser);
        assertNotNull(createdUser);
        assertNotNull(createdUser.getUserID());
        assertEquals(newUser.getUsername(), createdUser.getUsername());
        assertEquals(newUser.getPassword(), createdUser.getPassword());
        assertEquals(newUser.getEmail(), createdUser.getEmail());
        
        // Verify user can be retrieved
        User fetchedUser = userDAO.getUserById(createdUser.getUserID());
        assertNotNull(fetchedUser);
        assertEquals(createdUser.getUserID(), fetchedUser.getUserID());
    }

    @Test
    public void test_updateUser() {
        UserDAO userDAO = new UserDAO();
        
        // Create test user
        User newUser = new User(
            null,
            "testuser_" + System.currentTimeMillis(),
            "testpass",
            "test" + System.currentTimeMillis() + "@example.com",
            new Timestamp(System.currentTimeMillis())
        );
        
        User createdUser = userDAO.createUser(newUser);
        
        // Create updated user with same ID but new unique values
        long timestamp = System.currentTimeMillis();
        User updatedUser = new User(
            createdUser.getUserID(),
            "updated_" + timestamp,
            "newpass",
            "updated_" + timestamp + "@example.com",
            createdUser.getRegisterDate()
        );
        
        // Test updating user
        User result = userDAO.updateUser(updatedUser);
        assertNotNull(result);
        assertEquals(updatedUser.getUserID(), result.getUserID());
        assertEquals(updatedUser.getUsername(), result.getUsername());
        assertEquals(updatedUser.getPassword(), result.getPassword());
        assertEquals(updatedUser.getEmail(), result.getEmail());
        
        // Verify changes were persisted
        User fetchedUser = userDAO.getUserById(updatedUser.getUserID());
        assertNotNull(fetchedUser);
        assertEquals(updatedUser.getUsername(), fetchedUser.getUsername());
        assertEquals(updatedUser.getPassword(), fetchedUser.getPassword());
        assertEquals(updatedUser.getEmail(), fetchedUser.getEmail());
    }

    @Test
    public void test_deleteUser() {
        UserDAO userDAO = new UserDAO();
        
        // Create test user
        long timestamp = System.currentTimeMillis();
        User testUser = new User(
            null,
            "delete_test_" + timestamp,
            "testpass",
            "delete_test_" + timestamp + "@example.com",
            new Timestamp(timestamp)
        );
        
        // Create user in DB
        User createdUser = userDAO.createUser(testUser);
        assertNotNull(createdUser);
        assertNotNull(createdUser.getUserID());
        
        // Verify user exists
        User fetchedUser = userDAO.getUserById(createdUser.getUserID());
        assertNotNull(fetchedUser);
        
        // Delete the user
        userDAO.deleteUser(createdUser);
        
        // Verify user no longer exists
        User deletedUser = userDAO.getUserById(createdUser.getUserID());
        assertNull(deletedUser);
    }
}
